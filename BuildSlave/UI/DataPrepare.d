/*
Generated by Entice Designer
Entice Designer written by Christopher E. Miller
www.dprogramming.com/entice.php
*/
module BuildSlave.UI.DataPrepare;

import std.file;
import std.path;
import std.algorithm;
import std.array;
import std.string;
import std.conv;
import std.math;
import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;
import org.eclipse.swt.widgets.TabFolder;
import org.eclipse.swt.widgets.TabItem;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.List;
import org.eclipse.swt.widgets.Combo;
//import org.eclipse.swt.widgets.MessageBox;
//import org.eclipse.swt.widgets.Listener;
//import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.layout.RowLayout;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.custom.SashForm;
import BuildSlave.UI.Base;
import BuildSlave.UI.Status;
import BuildSlave.Config;

class UIDataPrepare : UIBase
{
    static final string typeName = "Data Prepare";
    bool initialized = false;

    enum Component
    {
        Worlds,
        Levels,
        Platforms,
        Languages,
        Max
    }

    private class FilteredList
    {
        Label label;
        Text  filter;
        List  list;
        string lastFilterText;
        string[string] abbreviations;
        string seperator;
        FilterModifyListener filterModifyListener;

        this()
        {
        }

        void createUI(Composite canvas, string typeName, int heightHint, int widthHint)
        {
            Composite container = new Composite(canvas, SWT.NONE);
            GridLayout layout = new GridLayout();
            layout.marginWidth = 0;
            layout.marginHeight = 0;
            layout.horizontalSpacing = 0;
            layout.verticalSpacing = 0;
            //layout.fill = true;
            //layout.wrap = false;
            container.setLayout(layout);

            seperator = Config.GetVariableOrDefaultValue("Preprocessor" ~ typeName ~ "MultiSeperator", null);
            int multiStyle = seperator !is null ? SWT.MULTI : SWT.SINGLE;

            //~SWT Label=label
            label = new Label(container,SWT.LEFT);
            label.setText(typeName ~ "s:");
            label.setBackground(display.getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
            //label.setBounds(12, 12, 160, 16);

            //~SWT Text=filter
            filter = new Text(container,SWT.SEARCH);
            GridData gridDataFilter = new GridData(GridData.FILL_HORIZONTAL);
            filter.setLayoutData(gridDataFilter);

            //~SWT List=list
            list = new List(container,multiStyle|SWT.BORDER|SWT.V_SCROLL|SWT.H_SCROLL);
            //list.setLayoutData(gridData3Row);
            GridData gridDataList = new GridData(GridData.FILL_BOTH);
            gridDataList.heightHint = heightHint;
            gridDataList.widthHint  = widthHint;
            list.setLayoutData(gridDataList);
            //list.setLayoutData(new GridData(GridData.FILL_BOTH));
            //list.addSelectionListener(new WorldSelectedListener());
            list.addSelectionListener(new UpdateCMDLineListener());
            //list.setBounds(col1Pos.x, col1Pos.y, col1SubSize.x, col1SubSize.y);

            filterModifyListener = new FilterModifyListener();
            filter.addModifyListener(filterModifyListener);
        }

        void setText(string text, bool enableEvents = false)
        {
            string oldText = filter.getText();
            if(text == oldText) return;
            //if(text.length < oldText.length) return;

            filterModifyListener.enabled = enableEvents;
            filter.setText(text);
            filter.setSelection(oldText.length, text.length);
            filterModifyListener.enabled = true;
        }

        string cleanName(string a)
        {
            return toLower(translate(a, ['_' : ' ']));
        }

        void doneUpdating()
        {
            lastFilterText = "";
            auto items = list.getItems();
            foreach(ref item; items)
                item = cleanName(item);
            abbreviations = std.string.abbrev(items);
        }

        private class FilterModifyListener : ModifyListener
        {
            bool enabled = true;
            public int distance(string a, string[] ass, string[] selected, string b)
            {
                int ranking = 0;

                int i = countUntil(selected, b);
                if(i != -1)
                {
                    ranking += (selected.length - i) * 1000;
                    return (ranking);
                }

                foreach(str; ass)
                {
                    ranking += indexOf(b, str, std.string.CaseSensitive.no) != -1 ? str.length * 10 : 0;
                }
                foreach(str; ass)
                {
                    if(startsWith(b, str) != 0)
                    {
                        ranking += str.length * 20;
                        break;
                    }
                }

                int ld = levenshteinDistance(a, b);
                //int sizeDiff = (b.length - a.length);
                ranking += max(0,  10 - ld / 2);

                return (ranking);
            }
            override public void modifyText(ModifyEvent e)
            {
                if(!enabled) return;

                if(abbreviations.length == 0)
                    doneUpdating();

                string filterString = filter.getText();
                if(filterString.length == 0 || lastFilterText == filterString) return;


                {
                    string[] filterStrings = seperator !is null ? split(filterString, seperator) : split(filterString, " ");
                    auto selection = list.getSelection();
                    auto items = list.getItems();
                    schwartzSort!(i => distance(filterString, filterStrings, selection, i), "a > b")(items);
                    list.setItems(items);
                    list.setSelection(selection);
                }

                string lastFilter = lastFilterText;
                int ret = startsWith(lastFilterText, filterString);
                if(startsWith(lastFilterText, filterString) == 0)
                {
                    string cleanfilterString = cleanName(filterString);
                    string[] cleanfilters = seperator !is null ? split(cleanfilterString, seperator) : [cleanfilterString];
                    foreach(cleanfilter; cleanfilters)
                    {
                        auto result = cleanfilter in abbreviations;
                        if(result !is null)
                        {
                            foreach(i, item; list.getItems())
                            {
                                if(cleanName(item) == *result)
                                {
                                    list.select(i);
                                    list.postEvent(SWT.Selection);
                                    break;
                                }
                            }
                        }
                    }
                }

                lastFilterText = filterString;
            }
        }
    }

    // Do not modify or move this block of variables.
    //~Entice Designer variables begin here.
    org.eclipse.swt.widgets.Group.Group grpAdvanced;
    org.eclipse.swt.widgets.Button.Button[] chkBuildOptions;
    FilteredList[Component.Max] filteredList;
    org.eclipse.swt.widgets.Text.Text txtCmdLine;
    org.eclipse.swt.widgets.TabFolder.TabFolder tabStatuses;
    //org.eclipse.swt.widgets.Text.Text txtStatus;
    org.eclipse.swt.widgets.Button.Button btnBuild;
    //org.eclipse.swt.widgets.ProgressBar.ProgressBar progressBar;
    //~Entice Designer variables end here.

    string[] worlds;
    string[] levels;

    this(Composite parent)
    {
        super(parent);
    }

    override public void preInitialize()
    {
    }

    override public void initialize()
    {
        if(!initialized)
            createUI(this.UIBase.Composite);
        checkDependencies();
    }

    override public void postInitialize()
    {
        PopulateWorlds();
        PopulateLevels(filteredList[Component.Worlds].list.getSelection());
        PopulatePlatforms();
        PopulateLanguages();
        UpdateCMDLine();
    }

    override public bool checkDependencies()
    {
        bool ret = true;
        string preprocessor = absolutePath(Config.GetVariableOrDefaultValue("PreprocessorExe", ""));
        if(!exists(preprocessor))
        {
            auto errorMsg = "ERROR: Can not find Preprocessor '" ~ preprocessor;
            UIStatus.get().appendLine(UIBase.ErrorLog, errorMsg);
            ret = false;
        }
        string worldsDir = absolutePath(Config.GetVariableOrDefaultValue("WorldsDir", ""));
        if(!exists(worldsDir))
        {
            auto errorMsg = "ERROR: Can not find World Directory '" ~ worldsDir;
            UIStatus.get().appendLine(UIBase.ErrorLog, errorMsg);
            ret = false;
        }
        return ret;
    }

    private void createUI(Composite canvas)
    {
        //immutable Position2D col1Pos  = UIBase.BorderMargin;
        //immutable Position2D col1Size = Position2D(160, 251);
        //immutable Position2D col1LblSize = Position2D(col1Size.x, UIBase.CellMinSize.y);
        //immutable Position2D col1SubSize = Position2D(col1Size.x, col1Size.y - UIBase.CellMinSize.y);
        //immutable Position2D col2Pos  = col1Pos.addX(col1Size + UIBase.CellSpacing);
        //immutable Position2D col3Pos  = col2Pos.addX(col1Size + UIBase.CellSpacing);

        GridLayout gl = new GridLayout();
        canvas.setLayout(gl);
        {
            SashForm sashFormLevel_1 = new SashForm(canvas, SWT.HORIZONTAL);

            //GridData gridData = new GridData(GridData.FILL_BOTH);
            ////gridData.grabExcessHorizontalSpace = true;
            ////gridData.grabExcessVerticalSpace   = true;
            ////gridData.horizontalAlignment = GridData.FILL;
            ////gridData.verticalAlignment   = GridData.FILL;
            ////gridData.horizontalSpan = 2;
            ////gridData.verticalSpan   = 1;
            ////gridData.heightHint        = 320;
            ////gridData.widthHint         = 160 * 3;
            //sashFormLevel_1.setLayoutData(gridData);

            filteredList[Component.Worlds] = new FilteredList();
            filteredList[Component.Worlds].createUI(sashFormLevel_1, "World", 320, 160);
            filteredList[Component.Worlds].list.addSelectionListener(new WorldSelectedListener());

            filteredList[Component.Levels] = new FilteredList();
            filteredList[Component.Levels].createUI(sashFormLevel_1, "Level", 320, 160);

            {
                SashForm sashFormLevel_1_1 = new SashForm(sashFormLevel_1, SWT.VERTICAL);
                //Composite container = new Composite(sashFormLevel_1, SWT.NONE);
                //GridLayout layout = new GridLayout();
                //layout.marginWidth = 0;
                //layout.marginHeight = 0;
                //layout.horizontalSpacing = 0;
                //layout.verticalSpacing = 0;
                //container.setLayout(layout);
                
                filteredList[Component.Platforms] = new FilteredList();
                filteredList[Component.Platforms].createUI(sashFormLevel_1_1, "Platform", 160, 160);

                filteredList[Component.Languages] = new FilteredList();
                filteredList[Component.Languages].createUI(sashFormLevel_1_1, "Language", 80, 160);
            }
            {
                Composite container = new Composite(sashFormLevel_1, SWT.NONE);
                GridLayout layout = new GridLayout();
                layout.marginWidth = 0;
                layout.marginHeight = 0;
                layout.horizontalSpacing = 0;
                layout.verticalSpacing = 0;
                container.setLayout(layout);

                //~SWT org.eclipse.swt.widgets.Group.Group=grpAdvanced
                grpAdvanced = new org.eclipse.swt.widgets.Group.Group(container,SWT.NONE);
                grpAdvanced.setText("Build Options (Advanced)");
                //grpAdvanced.setLayoutData(gridDataOptions);
                grpAdvanced.setLayoutData(new GridData(GridData.FILL_BOTH));
                grpAdvanced.setLayout(new RowLayout(SWT.VERTICAL));
                grpAdvanced.setBackground(display.getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
                grpAdvanced.setBackgroundMode(SWT.INHERIT_FORCE);
                //grpAdvanced.setBounds(352, 12, 160, 84);
                {
                    string preprocessorUIOptions  = Config.GetVariableOrDefaultValue("PreprocessorUserOptions", "");
                    string preprocessorDefaultCmd = Config.GetVariableOrDefaultValue("PreprocessorDefaultOptions", "");
                    auto uiOptions = split(preprocessorUIOptions, ",");
                    chkBuildOptions.length = uiOptions.length;
                    foreach (i, opt; uiOptions)
                    {
                        //~SWT org.eclipse.swt.widgets.Button.Button=chkShaderData check
                        chkBuildOptions[i] = new org.eclipse.swt.widgets.Button.Button(grpAdvanced,SWT.CHECK);
                        //munch(opt, " -");
                        chkBuildOptions[i].setText(opt);
                        bool def = indexOf(preprocessorDefaultCmd, opt, std.string.CaseSensitive.no) != -1;
                        chkBuildOptions[i].setSelection(def);
                        chkBuildOptions[i].addSelectionListener(new UpdateCMDLineListener());
                        //chkShaderData.setBounds(8, 51, 144, 23);
                    }
                }
            }
        }

        {
            SashForm sashFormLevel_2 = new SashForm(canvas, SWT.HORIZONTAL);

            GridData gridData = new GridData(GridData.HORIZONTAL_ALIGN_FILL);
            //gridData.grabExcessHorizontalSpace = true;
            //gridData.grabExcessVerticalSpace   = true;
            //gridData.horizontalAlignment = GridData.FILL;
            //gridData.verticalAlignment   = GridData.FILL;
            //gridData.horizontalSpan = 2;
            //gridData.verticalSpan   = 1;
            gridData.heightHint        = 54;
            //gridData.widthHint         = 160 * 3;
            sashFormLevel_2.setLayoutData(gridData);

            
            //~SWT org.eclipse.swt.widgets.Text.Text=txtCmdLine
            txtCmdLine = new org.eclipse.swt.widgets.Text.Text(sashFormLevel_2,SWT.BORDER|SWT.WRAP|SWT.V_SCROLL);
            //txtCmdLine.setLayoutData(gridDataCmdLine);
            //txtCmdLine.setBounds(12, 292, 500, 23);
            
            //~SWT org.eclipse.swt.widgets.Button.Button=btnBuild push
            btnBuild = new org.eclipse.swt.widgets.Button.Button(sashFormLevel_2,SWT.PUSH);
            btnBuild.setText("Build");
            //btnBuild.setLayoutData(gridDataButton);
            //btnBuild.setBounds(352, 196, 160, 88);
            btnBuild.addSelectionListener(new BuildListener());

            //int[] weights = [2, 1];
            sashFormLevel_2.setWeights([4,1]);
        }
    }

    private void PopulateWorlds()
    {
        string worldsDir = absolutePath(Config.GetVariableOrDefaultValue("WorldsDir", ""));
        string levelsDir = Config.GetVariableOrDefaultValue("LevelsDir", "");
        string worldsExt = Config.GetVariableOrDefaultValue("WorldsExt", "");

        filteredList[Component.Worlds].list.removeAll();
        if(!exists(worldsDir))
            return;

        auto slnDirEntries = dirEntries(worldsDir, SpanMode.shallow);

        foreach (DirEntry d; slnDirEntries)
        {
            if(!d.isDir())
                continue;
            
            if(!exists(d.name ~ "/" ~ baseName(d.name) ~ worldsExt))
                continue;

            if(!exists(d.name ~ "/" ~ levelsDir))
                continue;

            filteredList[Component.Worlds].list.add(baseName(d.name));
        }

        filteredList[Component.Worlds].doneUpdating();
        string userWorld  = Config.GetVariableOrDefaultValue("UserWorld", "");
        filteredList[Component.Worlds].setText(userWorld, true);
    }

    private void PopulateLevels(string[] worldNames)
    {
        foreach(worldName; worldNames)
        {
            string worldsDir = absolutePath(Config.GetVariableOrDefaultValue("WorldsDir", "") ~ "/" ~ worldName);
            string levelsDir = worldsDir ~ "/" ~ Config.GetVariableOrDefaultValue("LevelsDir", "");
            string levelsExt = Config.GetVariableOrDefaultValue("LevelsExt", "");

            filteredList[Component.Levels].list.removeAll();
            if(!exists(levelsDir))
                return;

            auto slnDirEntries = dirEntries(levelsDir, SpanMode.shallow);

            foreach (DirEntry d; slnDirEntries)
            {
                if(!d.isDir())
                    continue;

                if(!exists(d.name ~ "/" ~ baseName(d.name) ~ levelsExt))
                    continue;

                filteredList[Component.Levels].list.add(baseName(d.name));
            }
        }

        filteredList[Component.Levels].doneUpdating();
        string userLevel  = Config.GetVariableOrDefaultValue("UserLevel", "");
        filteredList[Component.Levels].setText(userLevel, true);
    }

    private void PopulatePlatforms()
    {
        string preprocessorPlatforms  = Config.GetVariableOrDefaultValue("PreprocessorPlatforms", "");
        auto platforms = split(preprocessorPlatforms, ",");
        filteredList[Component.Platforms].list.setItems(platforms);

        filteredList[Component.Platforms].doneUpdating();
        string userPlatform  = Config.GetVariableOrDefaultValue("UserPlatform", platforms[0]);
        filteredList[Component.Platforms].setText(userPlatform, true);
    }

    private void PopulateLanguages()
    {
        string preprocessorLanguages  = Config.GetVariableOrDefaultValue("PreprocessorLanguages", "");
        auto Languages = split(preprocessorLanguages, ",");
        filteredList[Component.Languages].list.setItems(Languages);

        filteredList[Component.Languages].doneUpdating();
        string userLanguage  = Config.GetVariableOrDefaultValue("UserLanguage", Languages[0]);
        filteredList[Component.Languages].setText(userLanguage, true);
    }

    private void UpdateCMDLine()
    {
        if(txtCmdLine is null)  return;

        string[] options;

        string preprocessor = absolutePath(Config.GetVariableOrDefaultValue("PreprocessorExe", ""));
        options ~= preprocessor;

        string worldOpt     = Config.GetVariableOrDefaultValue("PreprocessorWorldOption",    "-world=");
        string levelOpt     = Config.GetVariableOrDefaultValue("PreprocessorLevelOption",    "-level=");
        string platformOpt  = Config.GetVariableOrDefaultValue("PreprocessorPlatformOption", "-platform=");
        string languageOpt  = Config.GetVariableOrDefaultValue("PreprocessorLanguageOption", "-language=");
        string worldSeperator     = Config.GetVariableOrDefaultValue("PreprocessorWorldMultiSeperator",    "");
        string levelSeperator     = Config.GetVariableOrDefaultValue("PreprocessorLevelMultiSeperator",    "");
        string platformSeperator  = Config.GetVariableOrDefaultValue("PreprocessorPlatformMultiSeperator", "");
        string languageSeperator  = Config.GetVariableOrDefaultValue("PreprocessorLanguageMultiSeperator", "");
        string worlds = join(filteredList[Component.Worlds].list.getSelection(), worldSeperator);
        string levels = join(filteredList[Component.Levels].list.getSelection(), levelSeperator);
        string platforms = join(filteredList[Component.Platforms].list.getSelection(), platformSeperator);
        string languages = join(filteredList[Component.Languages].list.getSelection(), languageSeperator);
        if(!filteredList[Component.Worlds].list.getSelection().empty)
            options ~= worldOpt ~ worlds;
        if(!filteredList[Component.Levels].list.getSelection().empty)
            options ~= levelOpt ~ levels;
        if(!filteredList[Component.Platforms].list.getSelection().empty)
            options ~= platformOpt ~ platforms;
        if(!filteredList[Component.Languages].list.getSelection().empty)
            options ~= languageOpt ~ languages;

        string preprocessorDefaultCmd = Config.GetVariableOrDefaultValue("PreprocessorDefaultOptions", "");
        auto defaultOptions = split(preprocessorDefaultCmd, ",");
        string[] disabledOptions;
        string[] userOptions;
        foreach(chk; chkBuildOptions)
        {
            auto opt = toLower(chk.getText());
            if(chk.getSelection())
            {
                userOptions ~= opt;
            }
            else
            {
                disabledOptions ~= opt;
            }
        }
        foreach(dOpt; defaultOptions)
        {
            auto opt = toLower(dOpt);
            if(!canFind(disabledOptions, opt) && !canFind(userOptions, opt))
            {
                options ~= opt;
            }
        }
        options ~= userOptions;

        auto command = join(options, " ");

        txtCmdLine.setText(command);

        Config.SetVariable("UserWorld", worlds);
        Config.SetVariable("UserLevel", levels);
        Config.SetVariable("UserPlatform", platforms);
        Config.SetVariable("UserLanguage", languages);

        //filteredList[Component.Worlds].setText(worlds);
        //filteredList[Component.Levels].setText(levels);
        //filteredList[Component.Platforms].setText(platforms);
        //filteredList[Component.Languages].setText(languages);
    }

    private class WorldSelectedListener : SelectionAdapter
    {
        override public void widgetSelected(SelectionEvent e)
        {
            auto selectedItem = (e.item !is null) ? e.item : e.getSource();
            List cmb = cast(List)selectedItem;
            PopulateLevels(cmb.getSelection());

            //filteredList[Component.Levels].filter.postEvent(SWT.Modify);
        }
    }

    private class UpdateCMDLineListener : SelectionAdapter
    {
        override public void widgetSelected(SelectionEvent e)
        {
            UpdateCMDLine();
        }
    }

    private class BuildListener : SelectionAdapter
    {
        override public void widgetSelected(SelectionEvent e)
        {
            UIStatus.get().addStatus(typeName, txtCmdLine.getText(), 0);
        }
    }
}
