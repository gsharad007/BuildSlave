/*
Generated by Entice Designer
Entice Designer written by Christopher E. Miller
www.dprogramming.com/entice.php
*/
module BuildSlave.UI.DataPrepare;

import std.file;
import std.path;
import std.algorithm;
import std.array;
import std.string;
import std.conv;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.TabFolder;
import org.eclipse.swt.widgets.TabItem;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.List;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.swt.widgets.MessageBox;
//import org.eclipse.swt.widgets.Listener;
//import org.eclipse.swt.widgets.Event;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.layout.GridLayout;
import org.eclipse.swt.layout.RowLayout;
import org.eclipse.swt.layout.FillLayout;
import org.eclipse.swt.custom.SashForm;
import BuildSlave.UI.Base;
import BuildSlave.Config;


class UIDataPrepare : UIBase
{
    bool initialized = false;
    // Do not modify or move this block of variables.
    //~Entice Designer variables begin here.
    org.eclipse.swt.widgets.Group.Group grpAdvanced;
    org.eclipse.swt.widgets.Button.Button[] chkBuildOptions;
    org.eclipse.swt.widgets.Label.Label lblWorlds;
    org.eclipse.swt.widgets.Label.Label lblLevels;
    org.eclipse.swt.widgets.Label.Label lblPlatforms;
    org.eclipse.swt.widgets.Combo.Combo cmbWorlds;
    org.eclipse.swt.widgets.Combo.Combo cmbLevels;
    org.eclipse.swt.widgets.Combo.Combo cmbPlatforms;
    org.eclipse.swt.widgets.Text.Text txtCmdLine;
    org.eclipse.swt.widgets.TabFolder.TabFolder tabStatuses;
    org.eclipse.swt.widgets.Text.Text txtStatus;
    org.eclipse.swt.widgets.Button.Button btnBuild;
    org.eclipse.swt.widgets.ProgressBar.ProgressBar progressBar;
    //~Entice Designer variables end here.

    string[] worlds;
    string[] levels;

    this(Composite parent)
    {
        super(parent);

        //initializeMyShell(display);

        //@  Other MyShell initialization code here.

    }

    override public void preInitialize()
    {
    }

    override public void initialize()
    {
        if(!initialized)
            createUI(this.UIBase.Composite);
        checkDependencies();
    }

    override public void postInitialize()
    {
        PopulateWorlds();
        PopulateLevels(cmbWorlds.getText());
        PopulatePlatforms();
        UpdateCMDLine();
    }

    override public bool checkDependencies()
    {
        string preprocessor = absolutePath(Config.GetVariableOrDefaultValue("PreprocessorExe", ""));
        if(!exists(preprocessor))
        {
            auto errorMsg = "ERROR: Can not find Preprocessor '" ~ preprocessor ~ "'\n";
            if(txtStatus !is null)
            {
                txtStatus.append(errorMsg);
            }
            else
            {
                assert(exists(preprocessor), errorMsg);
                return false;
            }
        }
        string worldsDir = absolutePath(Config.GetVariableOrDefaultValue("WorldsDir", ""));
        if(!exists(worldsDir))
        {
            auto errorMsg = "ERROR: Can not find World Directory '" ~ worldsDir ~ "'\n";
            if(txtStatus !is null)
            {
                txtStatus.append(errorMsg);
            }
            else
            {
                assert(exists(worldsDir), errorMsg);
                return false;
            }
        }
        return true;
    }

    private void createUI(Composite canvas)
    {
        //immutable Position2D col1Pos  = UIBase.BorderMargin;
        //immutable Position2D col1Size = Position2D(160, 251);
        //immutable Position2D col1LblSize = Position2D(col1Size.x, UIBase.CellMinSize.y);
        //immutable Position2D col1SubSize = Position2D(col1Size.x, col1Size.y - UIBase.CellMinSize.y);
        //immutable Position2D col2Pos  = col1Pos.addX(col1Size + UIBase.CellSpacing);
        //immutable Position2D col3Pos  = col2Pos.addX(col1Size + UIBase.CellSpacing);

        GridLayout gl = new GridLayout();
        canvas.setLayout(gl);
        //gl.marginWidth = 0;
        //gl.marginHeight = 0;
        //gl.numColumns=2;
        //gl.makeColumnsEqualWidth = true;

        //GridData gridDataCommon = new GridData(GridData.HORIZONTAL_ALIGN_FILL);
        ////gridDataCommon.grabExcessHorizontalSpace = true;
        ////gridDataCommon.grabExcessVerticalSpace   = false;
        ////gridDataCommon.horizontalAlignment = GridData.FILL;
        ////gridDataCommon.verticalAlignment   = GridData.FILL;
        ////gridDataCommon.horizontalSpan = 1;
        ////gridDataCommon.verticalSpan   = 1;
        //
        //GridData gridDataPlatforms = new GridData(GridData.HORIZONTAL_ALIGN_FILL);
        //GridData gridDataOptions = new GridData(GridData.HORIZONTAL_ALIGN_FILL);
        //
        //GridData gridDataButton = new GridData(GridData.FILL_BOTH);
        //gridDataButton.heightHint        = 32;
        //
        //GridData gridData3Row = new GridData(GridData.FILL_BOTH);
        ////gridData3Row.grabExcessHorizontalSpace = true;
        ////gridData3Row.grabExcessVerticalSpace   = true;
        ////gridData3Row.horizontalAlignment = GridData.FILL;
        ////gridData3Row.verticalAlignment   = GridData.FILL;
        //gridData3Row.horizontalSpan = 1;
        //gridData3Row.verticalSpan   = 2;
        //gridData3Row.widthHint      = 160;
        //gridData3Row.heightHint     = 320;
        //
        //GridData gridDataCmdLine = new GridData(GridData.HORIZONTAL_ALIGN_FILL);
        ////gridDataCmdLine.grabExcessHorizontalSpace = true;
        ////gridDataCmdLine.grabExcessVerticalSpace   = true;
        ////gridDataCmdLine.horizontalAlignment = GridData.FILL;
        ////gridDataCmdLine.verticalAlignment   = GridData.FILL;
        //gridDataCmdLine.horizontalSpan = 2;
        //gridDataCmdLine.verticalSpan   = 1;
        //gridDataCmdLine.heightHint        = 32;
        ////gridDataCmdLine.widthHint         = 160 * 3;
        //
        //GridData gridDataProgressBar = new GridData(GridData.FILL_HORIZONTAL);
        ////gridDataProgressBar.grabExcessHorizontalSpace = true;
        ////gridDataProgressBar.grabExcessVerticalSpace   = true;
        ////gridDataProgressBar.horizontalAlignment = GridData.FILL;
        ////gridDataProgressBar.verticalAlignment   = GridData.FILL;
        //gridDataProgressBar.horizontalSpan = 3;
        //gridDataProgressBar.verticalSpan   = 1;
        //
        //GridData gridDataStatus = new GridData(GridData.FILL_BOTH);
        ////gridDataStatus.grabExcessHorizontalSpace = true;
        ////gridDataStatus.grabExcessVerticalSpace   = true;
        ////gridDataStatus.horizontalAlignment = GridData.FILL;
        ////gridDataStatus.verticalAlignment   = GridData.FILL;
        //gridDataStatus.horizontalSpan = 3;
        //gridDataStatus.verticalSpan   = 1;
        //gridDataStatus.heightHint     = 160;

        // Do not manually modify this function.
        //~Entice Designer 0.8.5.02 code begins here.

        {
            SashForm sashFormLevel_1 = new SashForm(canvas, SWT.HORIZONTAL);

            GridData gridData = new GridData(GridData.FILL_BOTH);
            //gridData.grabExcessHorizontalSpace = true;
            //gridData.grabExcessVerticalSpace   = true;
            //gridData.horizontalAlignment = GridData.FILL;
            //gridData.verticalAlignment   = GridData.FILL;
            //gridData.horizontalSpan = 2;
            //gridData.verticalSpan   = 1;
            //gridData.heightHint        = 320;
            //gridData.widthHint         = 160 * 3;
            sashFormLevel_1.setLayoutData(gridData);

            {
                Composite container = new Composite(sashFormLevel_1, SWT.NONE);
                GridLayout layout = new GridLayout();
                layout.marginWidth = 0;
                layout.marginHeight = 0;
                layout.horizontalSpacing = 0;
                layout.verticalSpacing = 0;
                //layout.fill = true;
                //layout.wrap = false;
                container.setLayout(layout);
                
                //~SWT org.eclipse.swt.widgets.Label.Label=lblWorlds
                lblWorlds = new org.eclipse.swt.widgets.Label.Label(container,SWT.LEFT);
                lblWorlds.setText("Worlds:");
                //lblWorlds.setBounds(12, 12, 160, 16);
                
                //~SWT org.eclipse.swt.widgets.Combo.Combo=cmbWorlds
                cmbWorlds = new org.eclipse.swt.widgets.Combo.Combo(container,SWT.SIMPLE);
                //cmbWorlds.setLayoutData(gridData3Row);
                GridData gridDataList = new GridData(GridData.FILL_BOTH);
                gridDataList.heightHint        = 320;
                gridDataList.widthHint         = 160;
                cmbWorlds.setLayoutData(gridDataList);
                //cmbWorlds.setLayoutData(new GridData(GridData.FILL_BOTH));
                cmbWorlds.addSelectionListener(new WorldSelectedListener(this));
                cmbWorlds.addSelectionListener(new UpdateCMDLineListener(this));
                //cmbWorlds.setBounds(col1Pos.x, col1Pos.y, col1SubSize.x, col1SubSize.y);
            }
            {
                Composite container = new Composite(sashFormLevel_1, SWT.NONE);
                GridLayout layout = new GridLayout();
                layout.marginWidth = 0;
                layout.marginHeight = 0;
                layout.horizontalSpacing = 0;
                layout.verticalSpacing = 0;
                container.setLayout(layout);
                
                //~SWT org.eclipse.swt.widgets.Label.Label=lblLevels
                lblLevels = new org.eclipse.swt.widgets.Label.Label(container,SWT.LEFT);
                lblLevels.setText("Levels:");
                //lblLevels.setBounds(176, 12, 160, 16);
                
                //~SWT org.eclipse.swt.widgets.Combo.Combo=cmbLevels
                cmbLevels = new org.eclipse.swt.widgets.Combo.Combo(container,SWT.SIMPLE);
                //cmbLevels.setLayoutData(gridData3Row);
                cmbLevels.setLayoutData(new GridData(GridData.FILL_BOTH));
                cmbLevels.addSelectionListener(new UpdateCMDLineListener(this));
                //cmbLevels.setBounds(176, 28, 160, 251);
            }
            {
                Composite container = new Composite(sashFormLevel_1, SWT.NONE);
                GridLayout layout = new GridLayout();
                layout.marginWidth = 0;
                layout.marginHeight = 0;
                layout.horizontalSpacing = 0;
                layout.verticalSpacing = 0;
                container.setLayout(layout);
                
                //~SWT org.eclipse.swt.widgets.Label.Label=lblPlatforms
                lblPlatforms = new org.eclipse.swt.widgets.Label.Label(container,SWT.LEFT);
                lblPlatforms.setText("Platforms:");
                //lblPlatforms.setBounds(176, 12, 160, 16);
                
                //~SWT org.eclipse.swt.widgets.Combo.Combo=cmbPlatforms
                cmbPlatforms = new org.eclipse.swt.widgets.Combo.Combo(container,SWT.SIMPLE);
                //cmbPlatforms.setLayoutData(gridDataPlatforms);
                cmbPlatforms.setLayoutData(new GridData(GridData.FILL_BOTH));
                cmbPlatforms.addSelectionListener(new UpdateCMDLineListener(this));
                //cmbPlatforms.setBounds(176, 28, 160, 251);
                
                //~SWT org.eclipse.swt.widgets.Group.Group=grpAdvanced
                grpAdvanced = new org.eclipse.swt.widgets.Group.Group(container,SWT.NONE);
                grpAdvanced.setText("Build Options (Advanced)");
                //grpAdvanced.setLayoutData(gridDataOptions);
                grpAdvanced.setLayoutData(new GridData(GridData.FILL_BOTH));
                grpAdvanced.setLayout(new RowLayout(SWT.VERTICAL));
                //grpAdvanced.setBounds(352, 12, 160, 84);
                {
                    string preprocessorUIOptions  = Config.GetVariableOrDefaultValue("PreprocessorUserOptions", "");
                    string preprocessorDefaultCmd = Config.GetVariableOrDefaultValue("PreprocessorDefaultOptions", "");
                    auto uiOptions = split(preprocessorUIOptions, ",");
                    chkBuildOptions.length = uiOptions.length;
                    foreach (i, opt; uiOptions)
                    {
                        //~SWT org.eclipse.swt.widgets.Button.Button=chkShaderData check
                        chkBuildOptions[i] = new org.eclipse.swt.widgets.Button.Button(grpAdvanced,SWT.CHECK);
                        //munch(opt, " -");
                        chkBuildOptions[i].setText(opt);
                        bool def = indexOf(preprocessorDefaultCmd, opt, std.string.CaseSensitive.no) != -1;
                        chkBuildOptions[i].setSelection(def);
                        chkBuildOptions[i].addSelectionListener(new UpdateCMDLineListener(this));
                        //chkShaderData.setBounds(8, 51, 144, 23);
                    }
                }
            }
        }

        {
            SashForm sashFormLevel_2 = new SashForm(canvas, SWT.HORIZONTAL);

            GridData gridData = new GridData(GridData.HORIZONTAL_ALIGN_FILL);
            //gridData.grabExcessHorizontalSpace = true;
            //gridData.grabExcessVerticalSpace   = true;
            //gridData.horizontalAlignment = GridData.FILL;
            //gridData.verticalAlignment   = GridData.FILL;
            //gridData.horizontalSpan = 2;
            //gridData.verticalSpan   = 1;
            gridData.heightHint        = 54;
            //gridData.widthHint         = 160 * 3;
            sashFormLevel_2.setLayoutData(gridData);

            
            //~SWT org.eclipse.swt.widgets.Text.Text=txtCmdLine
            txtCmdLine = new org.eclipse.swt.widgets.Text.Text(sashFormLevel_2,SWT.BORDER|SWT.WRAP|SWT.MULTI);
            //txtCmdLine.setLayoutData(gridDataCmdLine);
            //txtCmdLine.setBounds(12, 292, 500, 23);
            
            //~SWT org.eclipse.swt.widgets.Button.Button=btnBuild push
            btnBuild = new org.eclipse.swt.widgets.Button.Button(sashFormLevel_2,SWT.PUSH);
            btnBuild.setText("Build");
            //btnBuild.setLayoutData(gridDataButton);
            //btnBuild.setBounds(352, 196, 160, 88);
            btnBuild.addSelectionListener(new BuildListener(this) );

            //int[] weights = [2, 1];
            sashFormLevel_2.setWeights([4,1]);
        }

        ////~SWT org.eclipse.swt.widgets.TabFolder.TabFolder=tabStatuses
        //tabStatuses = new org.eclipse.swt.widgets.TabFolder.TabFolder(container,SWT.TOP);
        //tabStatuses.setLayoutData(gridDataStatus);
        //tabStatuses.setLayout(new FillLayout());
        ////tabStatuses.setBounds(12, 312, 500, 96);
        //{
        //    //~SWT org.eclipse.swt.widgets.Text.Text=txtStatus
        //    txtStatus = new org.eclipse.swt.widgets.Text.Text(tabStatuses,SWT.BORDER|SWT.WRAP|SWT.MULTI|SWT.READ_ONLY);
        //    //txtStatus.setBounds(2, 2, 466, 92);
        //}
        ////~DWT org.eclipse.swt.widgets.ProgressBar.ProgressBar=progressBar
        //progressBar = new org.eclipse.swt.widgets.ProgressBar.ProgressBar(container, SWT.NONE);
        //progressBar.setLayoutData(gridDataProgressBar);
        ////progressBar.setBounds(12, 410, 500, 23);
        ////~Entice Designer 0.8.5.02 code ends here.
    }

    private void PopulateWorlds()
    {
        string worldsDir = absolutePath(Config.GetVariableOrDefaultValue("WorldsDir", ""));
        string levelsDir = Config.GetVariableOrDefaultValue("LevelsDir", "");
        string worldsExt = Config.GetVariableOrDefaultValue("WorldsExt", "");

        cmbWorlds.removeAll();
        if(!exists(worldsDir))
            return;

        auto slnDirEntries = dirEntries(worldsDir, SpanMode.shallow);

        foreach (DirEntry d; slnDirEntries)
        {
            if(!d.isDir())
                continue;
            
            if(!exists(d.name ~ "/" ~ baseName(d.name) ~ worldsExt))
                continue;

            if(!exists(d.name ~ "/" ~ levelsDir))
                continue;

            cmbWorlds.add(baseName(d.name));
        }
    }

    private void PopulateLevels(string worldName)
    {
        string worldsDir = absolutePath(Config.GetVariableOrDefaultValue("WorldsDir", "") ~ "/" ~ worldName);
        string levelsDir = worldsDir ~ "/" ~ Config.GetVariableOrDefaultValue("LevelsDir", "");
        string levelsExt = Config.GetVariableOrDefaultValue("LevelsExt", "");

        cmbLevels.removeAll();
        if(!exists(levelsDir))
            return;

        auto slnDirEntries = dirEntries(levelsDir, SpanMode.shallow);

        foreach (DirEntry d; slnDirEntries)
        {
            if(!d.isDir())
                continue;

            if(!exists(d.name ~ "/" ~ baseName(d.name) ~ levelsExt))
                continue;

            cmbLevels.add(baseName(d.name));
        }
    }

    private void PopulatePlatforms()
    {
        string preprocessorPlatforms  = Config.GetVariableOrDefaultValue("PreprocessorPlatforms", "");
        auto platforms = split(preprocessorPlatforms, ",");
        string userPlatform  = Config.GetVariableOrDefaultValue("UserPlatform", platforms[0]);
        cmbPlatforms.setItems(platforms);
        cmbPlatforms.setText(userPlatform);
    }

    private void UpdateCMDLine()
    {
        if(txtCmdLine is null)  return;

        string preprocessor = absolutePath(Config.GetVariableOrDefaultValue("PreprocessorExe", ""));
        string preprocessorDefaultCmd = Config.GetVariableOrDefaultValue("PreprocessorDefaultOptions", "");
        auto defaultOptions = split(preprocessorDefaultCmd, ",");
        string[] disabledOptions;
        string[] userOptions;
        foreach(chk; chkBuildOptions)
        {
            auto opt = toLower(chk.getText());
            if(chk.getSelection())
            {
                userOptions ~= opt;
            }
            else
            {
                disabledOptions ~= opt;
            }
        }
        string[] options;
        foreach(dOpt; defaultOptions)
        {
            auto opt = toLower(dOpt);
            if(!canFind(disabledOptions, opt) && !canFind(userOptions, opt))
            {
                options ~= opt;
            }
        }
        options ~= userOptions;

        string platformOpt = Config.GetVariableOrDefaultValue("PreprocessorPlatformOption", "-platform=");
        string worldOpt = Config.GetVariableOrDefaultValue("PreprocessorWorldOption", "-world=");
        string levelOpt = Config.GetVariableOrDefaultValue("PreprocessorLevelOption", "-level=");
        if(!cmbPlatforms.getText().empty)
            options ~= platformOpt ~ cmbPlatforms.getText();
        if(!cmbWorlds.getText().empty)
            options ~= worldOpt ~ cmbWorlds.getText();
        if(!cmbLevels.getText().empty)
            options ~= levelOpt ~ cmbLevels.getText();

        auto optionsCmd = join(options, " ");

        txtCmdLine.setText(preprocessor ~ " " ~ optionsCmd);

        Config.SetVariable("UserPlatform", cmbPlatforms.getText());
        Config.SetVariable("UserWorld", cmbWorlds.getText());
        Config.SetVariable("UserLevel", cmbLevels.getText());
    }

    private class WorldSelectedListener : SelectionAdapter
    {
        UIDataPrepare ui;
        this(UIDataPrepare ui)
        {
            this.ui = ui;
        }
        override public void widgetSelected(SelectionEvent e)
        {
            auto selectedItem = (e.item !is null) ? e.item : e.getSource();
            Combo cmb = cast(Combo)selectedItem;
            PopulateLevels(cmb.getText());
            //Stdout("selected").newline;
        }
    }

    private class UpdateCMDLineListener : SelectionAdapter
    {
        UIDataPrepare ui;
        this(UIDataPrepare ui)
        {
            this.ui = ui;
        }
        override public void widgetSelected(SelectionEvent e)
        {
            ui.UpdateCMDLine();
        }
    }

    private class BuildListener : SelectionAdapter
    {
        UIDataPrepare ui;
        this(UIDataPrepare ui)
        {
            this.ui = ui;
        }
        override public void widgetSelected(SelectionEvent e)
        {
            //Stdout("selected").newline;
        }
    }
}
